// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  email            String        @unique
  password         String
  name             String
  phoneNumber      String
  personalNumber   String        @unique
  balance          Int           @default(0)
  points           Int           @default(0)
  createdAt        DateTime      @default(now())
  UserOffer        UserOffer[]
  transactionsFrom Transaction[] @relation("TransactionsFromUser")
  transactionsTo   Transaction[] @relation("TransactionsToUser")
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Offer {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  mainTitle       String
  imageUrl        String
  metaDescription String
  description     String[]
  createdAt       DateTime    @default(now())
  isActive        Boolean     @default(false)
  UserOffer       UserOffer[]
}

model UserOffer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  offerId   String   @db.ObjectId
  userId    String   @db.ObjectId
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  offer     Offer    @relation(fields: [offerId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, offerId])
}

model Transaction {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  balance     Int      @default(0)
  points      Int      @default(0)
  destination String
  amount      Float
  status      String
  createdAt   DateTime @default(now())

  fromUserId String @db.ObjectId
  toUserId   String @db.ObjectId

  fromUser User @relation("TransactionsFromUser", fields: [fromUserId], references: [id])
  toUser   User @relation("TransactionsToUser", fields: [toUserId], references: [id])
}
